Roger Bucio
Game Programming
12/14/2020


Game Name: SunnyScroller
Description short: Sunny Scroller is a 2D infinite runner where the player jumps between platforms.
Description Long: Sunny Scroller is an endless runner that challenges the player’s ability to accurately move from platform to platform as they gain points the longer they last. The game begins with a moderate speed but as the game progresses the speed gradually increases making the gameplay more challenging. The player is allowed to restart the game when they die and attempt to beat their score to establish a new high score. They are given a rest as a menu pops up when they die to allow the player to exit the game or continue to challenge their own skill and patience. 
Credits: Sunny land Assets and art - Ansimuz
Genre: Platformer, Endless Runner, 2D
Post Mortem
* UML
  

SunnyScroller mostly depended on the libraries set in place by unity to accomplish certain aspects of the game. UnityEngine, UnityEngine.SceneManagement, and Unity.UI were the dependencies used for the project in order to accomplish the menus and loading of new scenes of the game. The rest of the project used the system dependencies established by Visual Studio to complete the project. Class/Component design was well handled but if I could start over I would want to incorporate the platform remover class into the platform management class in order to get a more efficient and smaller game with all platform functionality being controlled through the manager. I would also like to edit the player controller script to separate input from the player and the aspects of the player asset. The game codebase is for the most part dependent on the unity system as the code grabs components of the created GameObject within unity to perform the actions and generate the platforms necessary for the game to have infinite randomized platforms. The unity code however is modified through the basic visual studio system for c# allowing for the user to change the components of the game objects without hardcoding any values to the variables. The separation between platform removal and management scripts makes it a bit more difficult but platforms can still be generated from the prefabs to create new levels for the player to run through and create scores to beat. A large portion of the variables present within the scripts can be easily manipulated from the unity interface allowing the user to edit aspects of gameplay easily creating a more balanced and maintainable experience. The game has all of the main features complete allowing the player to experience the gameplay but minor issues still need to be worked out. The platforms appear to have an issue where some of the platforms spawn within each other more time would’ve allowed me to complete the issue but it is not detrimental to the gameplay. I also wished to better integrate some of the classes together to get a more efficient and reusable class for platform management and player control. One other minor issue that arose is the player is allowed for a brief period of time to jump when not on a platform. The issue is not serious in terms of functionality but time to remedy the issue would help improve the gameplay experience. In the end, the project was only left with minor maintenance to be completed but if I could change my proposal I would change the aspect of time as a score and have the score be point-based instead of time-based.